openapi: 3.0.3
info:
  title: IT Center Staff Authentication API
  description: |
    REST API for IT Center Staff Authentication and Role Management System.
    
    This API provides endpoints for:
    - User profile management
    - Role-based access control
    - Audit logging
    - Admin user management
    
    ## Authentication
    
    This API uses JWT tokens from AWS Cognito for authentication. Include the token in the Authorization header:
    
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Roles
    
    - **ADMIN**: Full system access including user management and audit logs
    - **STAFF**: Basic access to personal profile and limited features
    
    ## Rate Limiting
    
    API requests are rate limited to prevent abuse. Current limits:
    - 100 requests per minute per user
    - 1000 requests per hour per user
    
  version: 1.0.0
  contact:
    name: IT Center Development Team
    email: dev@itcenter.com
  license:
    name: Proprietary
    url: https://itcenter.com/license

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://dev-api.itcenter.com/api/v1
    description: Development environment
  - url: https://stg-api.itcenter.com/api/v1
    description: Staging environment
  - url: https://api.itcenter.com/api/v1
    description: Production environment

security:
  - bearerAuth: []

paths:
  /healthz:
    get:
      tags:
        - Health Check
      summary: Health check
      description: Check if the service is running and healthy
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: UP
                  timestamp:
                    type: string
                    format: date-time
                  service:
                    type: string
                    example: IT Center Staff Auth API
                  version:
                    type: string
                    example: 1.0.0
        '503':
          description: Service is unhealthy

  /me:
    get:
      tags:
        - User Profile
      summary: Get current user profile
      description: Retrieve the profile information of the currently authenticated user
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    patch:
      tags:
        - User Profile
      summary: Update current user profile
      description: Update the profile information of the currently authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileDto'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /admin/users:
    get:
      tags:
        - User Management
      summary: Search users
      description: Search and paginate users with optional query filter
      parameters:
        - name: query
          in: query
          description: Search query for name or email
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            default: createdAt
        - name: direction
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/users/{userId}:
    get:
      tags:
        - User Management
      summary: Get user by ID
      description: Retrieve detailed information about a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserManagementDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /admin/users/{userId}/roles:
    patch:
      tags:
        - User Management
      summary: Update user roles
      description: Assign or remove roles for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRolesDto'
      responses:
        '200':
          description: Roles updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserManagementDto'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /admin/audit-log:
    get:
      tags:
        - Audit Log
      summary: Get audit logs
      description: Retrieve audit logs with optional filtering by user, event type, and date range
      parameters:
        - name: user_id
          in: query
          description: Filter by user ID
          required: false
          schema:
            type: string
        - name: event_type
          in: query
          description: Filter by event type
          required: false
          schema:
            type: string
            enum: [LOGIN, LOGOUT, LOGIN_FAILED, MFA_SUCCESS, MFA_FAILED, PASSWORD_RESET, ROLE_ASSIGNED, ROLE_REMOVED, PROFILE_UPDATED]
        - name: start_date
          in: query
          description: Start date for range filter
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          description: End date for range filter
          required: false
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from AWS Cognito

  schemas:
    UserProfileDto:
      type: object
      properties:
        userId:
          type: string
          description: Unique user identifier
          example: "us-east-1:12345678-1234-1234-1234-123456789012"
        email:
          type: string
          format: email
          description: User email address
          example: "john.doe@itcenter.com"
        displayName:
          type: string
          description: User display name
          example: "John Doe"
        locale:
          type: string
          description: User locale preference
          example: "en-US"
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        roles:
          type: array
          items:
            type: string
          description: User roles
          example: ["STAFF"]

    UpdateUserProfileDto:
      type: object
      required:
        - displayName
      properties:
        displayName:
          type: string
          minLength: 2
          maxLength: 50
          description: User display name
          example: "John Doe"
        locale:
          type: string
          maxLength: 10
          description: User locale preference
          example: "en-US"

    UserManagementDto:
      type: object
      properties:
        userId:
          type: string
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
        displayName:
          type: string
          description: User display name
        locale:
          type: string
          description: User locale preference
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        lastLoginAt:
          type: string
          format: date-time
          description: Last successful login timestamp
        roles:
          type: array
          items:
            type: string
          description: User roles
        active:
          type: boolean
          description: Whether the user account is active

    UpdateUserRolesDto:
      type: object
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            type: string
            enum: [ADMIN, STAFF]
          description: List of roles to assign to the user
          example: ["STAFF"]

    AuditLogDto:
      type: object
      properties:
        id:
          type: integer
          description: Audit log entry ID
        userId:
          type: string
          description: User ID who performed the action
        userEmail:
          type: string
          format: email
          description: Email of the user who performed the action
        userDisplayName:
          type: string
          description: Display name of the user who performed the action
        eventType:
          type: string
          enum: [LOGIN, LOGOUT, LOGIN_FAILED, MFA_SUCCESS, MFA_FAILED, PASSWORD_RESET, ROLE_ASSIGNED, ROLE_REMOVED, PROFILE_UPDATED]
          description: Type of event that was logged
        ipAddress:
          type: string
          description: IP address from which the action was performed
        userAgent:
          type: string
          description: User agent string from the client
        success:
          type: boolean
          description: Whether the action was successful
        failureReason:
          type: string
          description: Reason for failure if the action was unsuccessful
        sessionId:
          type: string
          description: Session identifier
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the event occurred

    PageResponseDto:
      type: object
      properties:
        content:
          type: array
          items: {}
          description: List of items in the current page
        page:
          type: integer
          description: Current page number (0-based)
        size:
          type: integer
          description: Number of items per page
        totalElements:
          type: integer
          description: Total number of items across all pages
        totalPages:
          type: integer
          description: Total number of pages
        first:
          type: boolean
          description: Whether this is the first page
        last:
          type: boolean
          description: Whether this is the last page
        hasNext:
          type: boolean
          description: Whether there is a next page
        hasPrevious:
          type: boolean
          description: Whether there is a previous page
        timestamp:
          type: string
          format: date-time
          description: Response timestamp

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Error message
          example: "Display name must be between 2 and 50 characters"
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
        traceId:
          type: string
          format: uuid
          description: Request trace ID for debugging

  responses:
    BadRequestError:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnauthorizedError:
      description: Unauthorized - Invalid or missing authentication token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ForbiddenError:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFoundError:
      description: Not found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
